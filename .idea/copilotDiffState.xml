<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/tricol/controller/FournisseurController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/tricol/controller/FournisseurController.java" />
              <option name="originalContent" value="package com.tricol.controller;&#10;&#10;import com.tricol.model.Fournisseur;&#10;import com.tricol.service.FournisseurService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/v1/fournisseurs&quot;)&#10;public class FournisseurController {&#10;&#10;    @Autowired&#10;    private FournisseurService fournisseurService;&#10;&#10;    // ✅ GET ALL&#10;    @GetMapping&#10;    public ResponseEntity&lt;List&lt;Fournisseur&gt;&gt; getAllFournisseurs() {&#10;        List&lt;Fournisseur&gt; fournisseurs = fournisseurService.getAllFournisseus();&#10;        if (fournisseurs.isEmpty()) {&#10;            return ResponseEntity.noContent().build(); // 204 No Content&#10;        }&#10;        return ResponseEntity.ok(fournisseurs); // 200 OK&#10;    }&#10;&#10;    // ✅ GET BY ID&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Fournisseur&gt; getFournisseurById(@PathVariable(&quot;id&quot;) long id) {&#10;        Optional&lt;Fournisseur&gt; optionalFournisseur = fournisseurService.getFournisseurById(id);&#10;        return optionalFournisseur&#10;                .map(ResponseEntity::ok) // 200 OK&#10;                .orElse(ResponseEntity.notFound().build()); // 404 Not Found&#10;    }&#10;&#10;    // ✅ UPDATE&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Fournisseur&gt; updateFournisseur(@RequestBody Fournisseur fournisseur,&#10;                                                         @PathVariable(&quot;id&quot;) Long id) {&#10;        Fournisseur updated = fournisseurService.updateFournisseur(fournisseur, id);&#10;        if (updated != null) {&#10;            return ResponseEntity.ok(updated); // 200 OK&#10;        } else {&#10;            return ResponseEntity.notFound().build(); // 404 Not Found&#10;        }&#10;    }&#10;&#10;    // ✅ ADD&#10;    @PostMapping&#10;    public ResponseEntity&lt;Fournisseur&gt; addFournisseur(@RequestBody Fournisseur fournisseur) {&#10;        Fournisseur created = fournisseurService.addFournisseur(fournisseur);&#10;        return ResponseEntity.status(201).body(created); // 201 Created&#10;    }&#10;&#10;    // ✅ DELETE&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;String&gt; deleteFournisseur(@PathVariable(&quot;id&quot;) Long id) {&#10;        String result = fournisseurService.deleteFournisseur(id);&#10;        if (result.equalsIgnoreCase(&quot;Fournisseur supprimé avec succès&quot;)) {&#10;            return ResponseEntity.ok(result); // 200 OK&#10;        } else {&#10;            return ResponseEntity.notFound().build(); // 404 Not Found&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.tricol.controller;&#10;&#10;import com.tricol.model.Fournisseur;&#10;import com.tricol.service.FournisseurService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/v1/fournisseurs&quot;)&#10;public class FournisseurController {&#10;&#10;    @Autowired&#10;    private FournisseurService fournisseurService;&#10;&#10;    // ✅ GET ALL&#10;    @GetMapping&#10;    public ResponseEntity&lt;List&lt;Fournisseur&gt;&gt; getAllFournisseurs() {&#10;        List&lt;Fournisseur&gt; fournisseurs = fournisseurService.getAllFournisseus();&#10;        if (fournisseurs.isEmpty()) {&#10;            return ResponseEntity.noContent().build(); // 204 No Content&#10;        }&#10;        return ResponseEntity.ok(fournisseurs); // 200 OK&#10;    }&#10;&#10;    // ✅ GET BY ID&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Fournisseur&gt; getFournisseurById(@PathVariable(&quot;id&quot;) long id) {&#10;        Optional&lt;Fournisseur&gt; optionalFournisseur = fournisseurService.getFournisseurById(id);&#10;        return optionalFournisseur&#10;                .map(ResponseEntity::ok) // 200 OK&#10;                .orElse(ResponseEntity.notFound().build()); // 404 Not Found&#10;    }&#10;&#10;    // ✅ UPDATE&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Fournisseur&gt; updateFournisseur(@RequestBody Fournisseur fournisseur,&#10;                                                         @PathVariable(&quot;id&quot;) Long id) {&#10;        Fournisseur updated = fournisseurService.updateFournisseur(fournisseur, id);&#10;        if (updated != null) {&#10;            return ResponseEntity.ok(updated); // 200 OK&#10;        } else {&#10;            return ResponseEntity.notFound().build(); // 404 Not Found&#10;        }&#10;    }&#10;&#10;    // ✅ ADD&#10;    @PostMapping&#10;    public ResponseEntity&lt;Fournisseur&gt; addFournisseur(@RequestBody Fournisseur fournisseur) {&#10;        Fournisseur created = fournisseurService.addFournisseur(fournisseur);&#10;        return ResponseEntity.status(201).body(created); // 201 Created&#10;    }&#10;&#10;    // ✅ DELETE&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;String&gt; deleteFournisseur(@PathVariable(&quot;id&quot;) Long id) {&#10;        boolean deleted = fournisseurService.deleteFournisseur(id);&#10;        if (deleted) {&#10;            return ResponseEntity.ok(&quot;Fournisseur supprimé avec succès&quot;); // 200 OK&#10;        } else {&#10;            return ResponseEntity.status(404).body(&quot;Fournisseur introuvable&quot;); // 404 Not Found&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/tricol/service/FournisseurService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/tricol/service/FournisseurService.java" />
              <option name="originalContent" value="package com.tricol.service;&#10;&#10;import com.tricol.model.Fournisseur;&#10;import com.tricol.repository.FournisseurRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;&#10;public class FournisseurService {&#10;    @Autowired&#10;    private FournisseurRepository fournisseurRepository;&#10;&#10;    public List&lt;Fournisseur&gt; getAllFournisseus() {&#10;        return fournisseurRepository.findAll();&#10;    }&#10;&#10;    public Optional&lt;Fournisseur&gt; getFournisseurById( long id){&#10;        return fournisseurRepository.findById(id);&#10;    }&#10;&#10;    public  Fournisseur  updateFournisseur( Fournisseur fournisseur,  Long id){&#10;        Optional&lt;Fournisseur&gt; fournisseur1 = fournisseurRepository.findById(id);&#10;        Fournisseur fournisseur_find = fournisseur1.orElseThrow(() -&gt;&#10;                new IllegalArgumentException(&quot;Fournisseur not found with id: &quot; + id));&#10;&#10;        if (fournisseur.getAdresse() != null) {&#10;            fournisseur_find.setAdresse(fournisseur.getAdresse());&#10;        }&#10;        if (fournisseur.getContact() != null) {&#10;            fournisseur_find.setContact(fournisseur.getContact());&#10;        }&#10;        if (fournisseur.getEmail() != null) {&#10;            fournisseur_find.setEmail(fournisseur.getEmail());&#10;        }&#10;        if (fournisseur.getIce() != null) {&#10;            fournisseur_find.setIce(fournisseur.getIce());&#10;        }&#10;        if (fournisseur.getSociete() != null) {&#10;            fournisseur_find.setSociete(fournisseur.getSociete());&#10;        }&#10;        if (fournisseur.getTelephone() != null) {&#10;            fournisseur_find.setTelephone(fournisseur.getTelephone());&#10;        }&#10;        if (fournisseur.getVille() != null) {&#10;            fournisseur_find.setVille(fournisseur.getVille());&#10;        }&#10;&#10;        return fournisseurRepository.save(fournisseur_find);&#10;&#10;    }&#10;&#10;    public  String  deleteFournisseur( Long id){&#10;        Optional&lt;Fournisseur&gt; fournisseurOptional = fournisseurRepository.findById(id);&#10;        if(fournisseurOptional.isPresent()){&#10;            fournisseurRepository.delete(fournisseurOptional.get());&#10;            return &quot;delete avec succes&quot;;&#10;        }else {&#10;            return &quot;aucun fournisseur avec cet id&quot;;&#10;        }&#10;&#10;    }&#10;&#10;    public  Fournisseur addFournisseur(Fournisseur fournisseur){&#10;        return fournisseurRepository.save(fournisseur);&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.tricol.service;&#13;&#10;&#13;&#10;import com.tricol.model.Fournisseur;&#13;&#10;import com.tricol.repository.FournisseurRepository;&#13;&#10;import org.springframework.beans.factory.annotation.Autowired;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;import java.util.Optional;&#13;&#10;&#13;&#10;&#13;&#10;public class FournisseurService {&#13;&#10;    @Autowired&#13;&#10;    private FournisseurRepository fournisseurRepository;&#13;&#10;&#13;&#10;    public List&lt;Fournisseur&gt; getAllFournisseus() {&#13;&#10;        return fournisseurRepository.findAll();&#13;&#10;    }&#13;&#10;&#13;&#10;    public Optional&lt;Fournisseur&gt; getFournisseurById( long id){&#13;&#10;        return fournisseurRepository.findById(id);&#13;&#10;    }&#13;&#10;&#13;&#10;    public  Fournisseur  updateFournisseur( Fournisseur fournisseur,  Long id){&#13;&#10;        Optional&lt;Fournisseur&gt; fournisseur1 = fournisseurRepository.findById(id);&#13;&#10;        Fournisseur fournisseur_find = fournisseur1.orElseThrow(() -&gt;&#13;&#10;                new IllegalArgumentException(&quot;Fournisseur not found with id: &quot; + id));&#13;&#10;&#13;&#10;        // Only overwrite fields when the incoming value is non-null. If null, keep existing.&#13;&#10;        if (fournisseur.getAdresse() != null) {&#13;&#10;            fournisseur_find.setAdresse(fournisseur.getAdresse());&#13;&#10;        }&#13;&#10;        if (fournisseur.getContact() != null) {&#13;&#10;            fournisseur_find.setContact(fournisseur.getContact());&#13;&#10;        }&#13;&#10;        if (fournisseur.getEmail() != null) {&#13;&#10;            fournisseur_find.setEmail(fournisseur.getEmail());&#13;&#10;        }&#13;&#10;        if (fournisseur.getIce() != null) {&#13;&#10;            fournisseur_find.setIce(fournisseur.getIce());&#13;&#10;        }&#13;&#10;        if (fournisseur.getSociete() != null) {&#13;&#10;            fournisseur_find.setSociete(fournisseur.getSociete());&#13;&#10;        }&#13;&#10;        if (fournisseur.getTelephone() != null) {&#13;&#10;            fournisseur_find.setTelephone(fournisseur.getTelephone());&#13;&#10;        }&#13;&#10;        if (fournisseur.getVille() != null) {&#13;&#10;            fournisseur_find.setVille(fournisseur.getVille());&#13;&#10;        }&#13;&#10;&#13;&#10;        return fournisseurRepository.save(fournisseur_find);&#13;&#10;&#13;&#10;    }&#13;&#10;&#13;&#10;    public  boolean deleteFournisseur( Long id){&#13;&#10;        Optional&lt;Fournisseur&gt; fournisseurOptional = fournisseurRepository.findById(id);&#13;&#10;        if(fournisseurOptional.isPresent()){&#13;&#10;            fournisseurRepository.delete(fournisseurOptional.get());&#13;&#10;            return true;&#13;&#10;        }else {&#13;&#10;            return false;&#13;&#10;        }&#13;&#10;&#13;&#10;    }&#13;&#10;&#13;&#10;    public  Fournisseur addFournisseur(Fournisseur fournisseur){&#13;&#10;        return fournisseurRepository.save(fournisseur);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>